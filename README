htmltmpl.erl
============

htmltmpl.erl is the erlang html template library. It must has capabilities
similar to HTML::Template perl module, but now it support only the next
constructs:

<TMPL_VAR NAME=var_name>
<TMPL_LOOP NAME=loop_name>...</TMPL_LOOP>
<TMPL_IF NAME=bool_var>...<TMPL_ELSE>...</TMPL_IF>
<TMPL_UNLESS NAME=bool_var>...<TMPL_ELSE>...</TMPL_UNLESS>

Build
=====

make && make test


Using
=====

To create a compiled template, call open function with a template source file as an
argument:

{ok, Tmpl} = htmltmpl:open("tmpl.html").

Next you must apply a data set to the compiled template:

Res = htmltmpl:apply(Tmpl, [{"var1", "f"}, {"var2", "123"},
      			    {"if_var", true},
			    {"loop1", [[{"inner_var", "1"}],
				       [{"inner_var", "2"}]]}]).

See the example in ex.erl.



Template tags
================

TMPL_VAR
    <TMPL_VAR NAME=var_name>

    This is simply replaced with value of var_name named tuple.

TMPL_LOOP
    <TMPL_LOOP NAME=loop_name>...<%/TMPL_LOOP>

    For this construct htmltmpl finds in a data set a tuple with name
    loop_name which contain an array.

TMPL_IF
    <TMPL_IF NAME=bool_var>...</TMPL_IF>
    <TMPL_IF NAME=bool_var>...<TMPL_ELSE>...</TMPL_IF>

    This tag allows a conditional including of a html part in a result.
    If bool_var data evaluates to true, then a content
    between <TMPL_IF> and </TMPL_IF> or between <TMPL_IF> and <TMPL_ELSE> is
    included in a result.

TMPL_UNLESS
    <TMPL_UNLESS NAME=bool_var>...</TMPL_UNLESS>
    <TMPL_UNLESS NAME=bool_var>...<TMPL_ELSE>...</TMPL_UNLESS>

    The same as TMPL_IF, but bool_var must be false.
